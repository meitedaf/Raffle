{"ast":null,"code":"// // App.js\n// import React, { useState, useEffect } from \"react\";\n// import Web3 from \"web3\";\n\n// // 合约 ABI 和地址\n// const raffleABI = [\n//     [{ \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"entranceFee\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"interval\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"vrfCoordinator\", \"type\": \"address\" }, { \"internalType\": \"bytes32\", \"name\": \"gasLane\", \"type\": \"bytes32\" }, { \"internalType\": \"uint256\", \"name\": \"subscriptionId\", \"type\": \"uint256\" }, { \"internalType\": \"uint32\", \"name\": \"callbackGasLimit\", \"type\": \"uint32\" }], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"have\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"want\", \"type\": \"address\" }], \"name\": \"OnlyCoordinatorCanFulfill\", \"type\": \"error\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"have\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"coordinator\", \"type\": \"address\" }], \"name\": \"OnlyOwnerOrCoordinator\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"Raffle__NotEnoughEthSent\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"Raffle__RaffleNotOpen\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"Raffle__TransforFailed\", \"type\": \"error\" }, { \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"currentBalance\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"numPlayers\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"raffleState\", \"type\": \"uint256\" }], \"name\": \"Raffle__UpkeepNotNeeded\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"ZeroAddress\", \"type\": \"error\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": false, \"internalType\": \"address\", \"name\": \"vrfCoordinator\", \"type\": \"address\" }], \"name\": \"CoordinatorSet\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"player\", \"type\": \"address\" }], \"name\": \"EnteredRaffle\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }], \"name\": \"OwnershipTransferRequested\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }], \"name\": \"OwnershipTransferred\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"winner\", \"type\": \"address\" }], \"name\": \"PickedWinner\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"requestId\", \"type\": \"uint256\" }], \"name\": \"RequestedRaffleWinner\", \"type\": \"event\" }, { \"inputs\": [], \"name\": \"acceptOwnership\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"bytes\", \"name\": \"\", \"type\": \"bytes\" }], \"name\": \"checkUpkeep\", \"outputs\": [{ \"internalType\": \"bool\", \"name\": \"upkeepNeeded\", \"type\": \"bool\" }, { \"internalType\": \"bytes\", \"name\": \"\", \"type\": \"bytes\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"enterRaffle\", \"outputs\": [], \"stateMutability\": \"payable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getEntranceFee\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getLastTimestamp\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getLengthOfPlayers\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"indexOfPlayers\", \"type\": \"uint256\" }], \"name\": \"getPlayer\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getRaffleState\", \"outputs\": [{ \"internalType\": \"enum Raffle.RaffleState\", \"name\": \"\", \"type\": \"uint8\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getRecentWinner\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"owner\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"bytes\", \"name\": \"\", \"type\": \"bytes\" }], \"name\": \"performUpkeep\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"requestId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256[]\", \"name\": \"randomWords\", \"type\": \"uint256[]\" }], \"name\": \"rawFulfillRandomWords\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"s_vrfCoordinator\", \"outputs\": [{ \"internalType\": \"contract IVRFCoordinatorV2Plus\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_vrfCoordinator\", \"type\": \"address\" }], \"name\": \"setCoordinator\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }], \"name\": \"transferOwnership\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }]\n// ];\n// const raffleAddress = 0x3e670fEd42c2eEdD6d2cfC10e03f8e5840b4865F; // 部署的合约地址\n\n// function App() {\n//     // 应用状态\n//     const [web3, setWeb3] = useState(null);\n//     const [contract, setContract] = useState(null);\n//     const [account, setAccount] = useState(null);\n//     const [entranceFee, setEntranceFee] = useState(null);\n//     const [players, setPlayers] = useState([]);\n//     const [recentWinner, setRecentWinner] = useState(null);\n//     const [raffleState, setRaffleState] = useState(null);\n//     const [balance, setBalance] = useState(null);\n\n//     // 初始化 Web3 和合约\n//     useEffect(() => {\n//         async function loadWeb3() {\n//             if (window.ethereum) {\n//                 try {\n//                     const web3 = new Web3(window.ethereum);\n//                     setWeb3(web3);\n\n//                     const accounts = await web3.eth.requestAccounts();\n//                     setAccount(accounts[0]);\n\n//                     const raffleContract = new web3.eth.Contract(raffleABI, raffleAddress);\n//                     setContract(raffleContract);\n//                 } catch (error) {\n//                     console.error(\"Error initializing web3: \", error);\n//                 }\n//             } else {\n//                 console.error(\"Please install MetaMask!\");\n//             }\n//         }\n//         loadWeb3();\n//     }, []);\n\n//     // 加载合约状态：获取入场费用、玩家、上次获胜者等信息\n//     useEffect(() => {\n//         if (contract && account) {\n//             async function fetchRaffleData() {\n//                 try {\n//                     const entranceFee = await contract.methods.getEntranceFee().call();\n//                     setEntranceFee(web3.utils.fromWei(entranceFee, \"ether\"));\n\n//                     const playerCount = await contract.methods.getLengthOfPlayers().call();\n//                     let playersArray = [];\n//                     for (let i = 0; i < playerCount; i++) {\n//                         const player = await contract.methods.getPlayer(i).call();\n//                         playersArray.push(player);\n//                     }\n//                     setPlayers(playersArray);\n\n//                     const recentWinner = await contract.methods.getRecentWinner().call();\n//                     setRecentWinner(recentWinner);\n\n//                     const raffleState = await contract.methods.getRaffleState().call();\n//                     setRaffleState(raffleState);\n\n//                     const contractBalance = await web3.eth.getBalance(raffleAddress);\n//                     setBalance(web3.utils.fromWei(contractBalance, \"ether\"));\n//                 } catch (error) {\n//                     console.error(\"Error fetching raffle data: \", error);\n//                 }\n//             }\n//             fetchRaffleData();\n//         }\n//     }, [contract, account, web3]);\n\n//     // 用户进入 Raffle 合约\n//     const enterRaffle = async () => {\n//         if (contract && account) {\n//             try {\n//                 await contract.methods.enterRaffle().send({\n//                     from: account,\n//                     value: web3.utils.toWei(entranceFee, \"ether\"),\n//                 });\n//                 alert(\"Successfully entered the raffle!\");\n//                 window.location.reload();\n//             } catch (error) {\n//                 console.error(\"Error entering raffle: \", error);\n//             }\n//         }\n//     };\n\n//     return (\n//         <div className=\"App\">\n//             <h1>Decentralized Raffle DApp</h1>\n//             <p>\n//                 <strong>Connected Account:</strong> {account ? account : \"Not connected\"}\n//             </p>\n\n//             <div>\n//                 <h2>Raffle Details</h2>\n//                 <p>\n//                     <strong>Entrance Fee:</strong> {entranceFee ? `${entranceFee} ETH` : \"Loading...\"}\n//                 </p>\n//                 <p>\n//                     <strong>Contract Balance:</strong> {balance ? `${balance} ETH` : \"Loading...\"}\n//                 </p>\n//                 <p>\n//                     <strong>Recent Winner:</strong> {recentWinner ? recentWinner : \"None yet\"}\n//                 </p>\n//                 <p>\n//                     <strong>Raffle State:</strong> {raffleState === \"0\" ? \"Open\" : \"Calculating\"}\n//                 </p>\n//                 <p>\n//                     <strong>Players:</strong>\n//                 </p>\n//                 <ul>\n//                     {players.length > 0 ? players.map((player, index) => <li key={index}>{player}</li>) : <p>No players yet</p>}\n//                 </ul>\n//             </div>\n\n//             <div>\n//                 <h2>Enter the Raffle</h2>\n//                 <button onClick={enterRaffle}>Enter Raffle</button>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["/Users/meite/Desktop/X/ECNU/Blockchain/solidity-24/foundry-f24/raffle/raffle-dapp/src/App.js"],"sourcesContent":["// // App.js\n// import React, { useState, useEffect } from \"react\";\n// import Web3 from \"web3\";\n\n// // 合约 ABI 和地址\n// const raffleABI = [\n//     [{ \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"entranceFee\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"interval\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"vrfCoordinator\", \"type\": \"address\" }, { \"internalType\": \"bytes32\", \"name\": \"gasLane\", \"type\": \"bytes32\" }, { \"internalType\": \"uint256\", \"name\": \"subscriptionId\", \"type\": \"uint256\" }, { \"internalType\": \"uint32\", \"name\": \"callbackGasLimit\", \"type\": \"uint32\" }], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"have\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"want\", \"type\": \"address\" }], \"name\": \"OnlyCoordinatorCanFulfill\", \"type\": \"error\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"have\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"coordinator\", \"type\": \"address\" }], \"name\": \"OnlyOwnerOrCoordinator\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"Raffle__NotEnoughEthSent\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"Raffle__RaffleNotOpen\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"Raffle__TransforFailed\", \"type\": \"error\" }, { \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"currentBalance\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"numPlayers\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"raffleState\", \"type\": \"uint256\" }], \"name\": \"Raffle__UpkeepNotNeeded\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"ZeroAddress\", \"type\": \"error\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": false, \"internalType\": \"address\", \"name\": \"vrfCoordinator\", \"type\": \"address\" }], \"name\": \"CoordinatorSet\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"player\", \"type\": \"address\" }], \"name\": \"EnteredRaffle\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }], \"name\": \"OwnershipTransferRequested\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }], \"name\": \"OwnershipTransferred\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"winner\", \"type\": \"address\" }], \"name\": \"PickedWinner\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"requestId\", \"type\": \"uint256\" }], \"name\": \"RequestedRaffleWinner\", \"type\": \"event\" }, { \"inputs\": [], \"name\": \"acceptOwnership\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"bytes\", \"name\": \"\", \"type\": \"bytes\" }], \"name\": \"checkUpkeep\", \"outputs\": [{ \"internalType\": \"bool\", \"name\": \"upkeepNeeded\", \"type\": \"bool\" }, { \"internalType\": \"bytes\", \"name\": \"\", \"type\": \"bytes\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"enterRaffle\", \"outputs\": [], \"stateMutability\": \"payable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getEntranceFee\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getLastTimestamp\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getLengthOfPlayers\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"indexOfPlayers\", \"type\": \"uint256\" }], \"name\": \"getPlayer\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getRaffleState\", \"outputs\": [{ \"internalType\": \"enum Raffle.RaffleState\", \"name\": \"\", \"type\": \"uint8\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getRecentWinner\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"owner\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"bytes\", \"name\": \"\", \"type\": \"bytes\" }], \"name\": \"performUpkeep\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"requestId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256[]\", \"name\": \"randomWords\", \"type\": \"uint256[]\" }], \"name\": \"rawFulfillRandomWords\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"s_vrfCoordinator\", \"outputs\": [{ \"internalType\": \"contract IVRFCoordinatorV2Plus\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_vrfCoordinator\", \"type\": \"address\" }], \"name\": \"setCoordinator\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }], \"name\": \"transferOwnership\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }]\n// ];\n// const raffleAddress = 0x3e670fEd42c2eEdD6d2cfC10e03f8e5840b4865F; // 部署的合约地址\n\n// function App() {\n//     // 应用状态\n//     const [web3, setWeb3] = useState(null);\n//     const [contract, setContract] = useState(null);\n//     const [account, setAccount] = useState(null);\n//     const [entranceFee, setEntranceFee] = useState(null);\n//     const [players, setPlayers] = useState([]);\n//     const [recentWinner, setRecentWinner] = useState(null);\n//     const [raffleState, setRaffleState] = useState(null);\n//     const [balance, setBalance] = useState(null);\n\n//     // 初始化 Web3 和合约\n//     useEffect(() => {\n//         async function loadWeb3() {\n//             if (window.ethereum) {\n//                 try {\n//                     const web3 = new Web3(window.ethereum);\n//                     setWeb3(web3);\n\n//                     const accounts = await web3.eth.requestAccounts();\n//                     setAccount(accounts[0]);\n\n//                     const raffleContract = new web3.eth.Contract(raffleABI, raffleAddress);\n//                     setContract(raffleContract);\n//                 } catch (error) {\n//                     console.error(\"Error initializing web3: \", error);\n//                 }\n//             } else {\n//                 console.error(\"Please install MetaMask!\");\n//             }\n//         }\n//         loadWeb3();\n//     }, []);\n\n//     // 加载合约状态：获取入场费用、玩家、上次获胜者等信息\n//     useEffect(() => {\n//         if (contract && account) {\n//             async function fetchRaffleData() {\n//                 try {\n//                     const entranceFee = await contract.methods.getEntranceFee().call();\n//                     setEntranceFee(web3.utils.fromWei(entranceFee, \"ether\"));\n\n//                     const playerCount = await contract.methods.getLengthOfPlayers().call();\n//                     let playersArray = [];\n//                     for (let i = 0; i < playerCount; i++) {\n//                         const player = await contract.methods.getPlayer(i).call();\n//                         playersArray.push(player);\n//                     }\n//                     setPlayers(playersArray);\n\n//                     const recentWinner = await contract.methods.getRecentWinner().call();\n//                     setRecentWinner(recentWinner);\n\n//                     const raffleState = await contract.methods.getRaffleState().call();\n//                     setRaffleState(raffleState);\n\n//                     const contractBalance = await web3.eth.getBalance(raffleAddress);\n//                     setBalance(web3.utils.fromWei(contractBalance, \"ether\"));\n//                 } catch (error) {\n//                     console.error(\"Error fetching raffle data: \", error);\n//                 }\n//             }\n//             fetchRaffleData();\n//         }\n//     }, [contract, account, web3]);\n\n//     // 用户进入 Raffle 合约\n//     const enterRaffle = async () => {\n//         if (contract && account) {\n//             try {\n//                 await contract.methods.enterRaffle().send({\n//                     from: account,\n//                     value: web3.utils.toWei(entranceFee, \"ether\"),\n//                 });\n//                 alert(\"Successfully entered the raffle!\");\n//                 window.location.reload();\n//             } catch (error) {\n//                 console.error(\"Error entering raffle: \", error);\n//             }\n//         }\n//     };\n\n//     return (\n//         <div className=\"App\">\n//             <h1>Decentralized Raffle DApp</h1>\n//             <p>\n//                 <strong>Connected Account:</strong> {account ? account : \"Not connected\"}\n//             </p>\n\n//             <div>\n//                 <h2>Raffle Details</h2>\n//                 <p>\n//                     <strong>Entrance Fee:</strong> {entranceFee ? `${entranceFee} ETH` : \"Loading...\"}\n//                 </p>\n//                 <p>\n//                     <strong>Contract Balance:</strong> {balance ? `${balance} ETH` : \"Loading...\"}\n//                 </p>\n//                 <p>\n//                     <strong>Recent Winner:</strong> {recentWinner ? recentWinner : \"None yet\"}\n//                 </p>\n//                 <p>\n//                     <strong>Raffle State:</strong> {raffleState === \"0\" ? \"Open\" : \"Calculating\"}\n//                 </p>\n//                 <p>\n//                     <strong>Players:</strong>\n//                 </p>\n//                 <ul>\n//                     {players.length > 0 ? players.map((player, index) => <li key={index}>{player}</li>) : <p>No players yet</p>}\n//                 </ul>\n//             </div>\n\n//             <div>\n//                 <h2>Enter the Raffle</h2>\n//                 <button onClick={enterRaffle}>Enter Raffle</button>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default App;"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}