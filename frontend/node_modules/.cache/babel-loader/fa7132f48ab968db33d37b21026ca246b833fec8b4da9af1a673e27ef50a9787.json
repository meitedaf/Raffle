{"ast":null,"code":"var _jsxFileName = \"/Users/meite/Desktop/X/ECNU/Blockchain/solidity-24/foundry-f24/raffle/raffle-dapp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport './App.css';\nimport RaffleABI from './RaffleABI.json'; // 导入你的合约 ABI\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst raffleAddress = 0x3e670fEd42c2eEdD6d2cfC10e03f8e5840b4865F; // 请替换为你的合约地址\n\nfunction App() {\n  _s();\n  const [account, setAccount] = useState(null);\n  const [entranceFee, setEntranceFee] = useState(\"Loading...\");\n  const [contractBalance, setContractBalance] = useState(\"Loading...\");\n  const [recentWinner, setRecentWinner] = useState(\"None yet\");\n  const [raffleState, setRaffleState] = useState(\"Loading...\");\n  const [players, setPlayers] = useState([]);\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      setAccount(accounts[0]);\n    } else {\n      alert(\"Please install Metamask!\");\n    }\n  };\n  const loadContractData = async () => {\n    if (!window.ethereum) return;\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const contract = new ethers.Contract(raffleAddress, RaffleABI, provider);\n    try {\n      // 获取 Entrance Fee\n      const fee = await contract.getEntranceFee();\n      setEntranceFee(ethers.utils.formatEther(fee));\n\n      // 获取合约余额\n      const balance = await provider.getBalance(raffleAddress);\n      setContractBalance(ethers.utils.formatEther(balance));\n\n      // 获取最近赢家\n      const winner = await contract.getRecentWinner();\n      setRecentWinner(winner);\n\n      // 获取抽奖状态\n      const state = await contract.getRaffleState();\n      setRaffleState(state === 0 ? \"Open\" : \"Calculating\");\n\n      // 获取玩家数量\n      const numPlayers = await contract.getLengthOfPlayers();\n      let playerList = [];\n      for (let i = 0; i < numPlayers; i++) {\n        const player = await contract.getPlayer(i);\n        playerList.push(player);\n      }\n      setPlayers(playerList);\n    } catch (error) {\n      console.error(\"Error loading contract data:\", error);\n    }\n  };\n  const enterRaffle = async () => {\n    if (!window.ethereum) {\n      alert(\"Please install Metamask!\");\n      return;\n    }\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(raffleAddress, RaffleABI, signer);\n    try {\n      const fee = await contract.getEntranceFee();\n      const transaction = await contract.enterRaffle({\n        value: fee\n      });\n      await transaction.wait();\n      alert(\"You have successfully entered the raffle!\");\n    } catch (error) {\n      console.error(\"Error entering the raffle:\", error);\n    }\n  };\n  useEffect(() => {\n    connectWallet();\n    loadContractData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Decentralized Raffle DApp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Connected Account: \", account]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Raffle Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Entrance Fee: \", entranceFee, \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Contract Balance: \", contractBalance, \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Recent Winner: \", recentWinner]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Raffle State: \", raffleState]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Players:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: players.length === 0 ? /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"No players yet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 41\n      }, this) : players.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: player\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 98\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: enterRaffle,\n      children: \"Enter Raffle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"QPTsQiUsJVbDc5LuX/thwFne3BU=\");\n_c = App;\nexport default App;\n\n// // App.js\n// import React, { useState, useEffect } from \"react\";\n// import Web3 from \"web3\";\n\n// // 合约 ABI 和地址\n// const raffleABI = [\n//     [{ \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"entranceFee\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"interval\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"vrfCoordinator\", \"type\": \"address\" }, { \"internalType\": \"bytes32\", \"name\": \"gasLane\", \"type\": \"bytes32\" }, { \"internalType\": \"uint256\", \"name\": \"subscriptionId\", \"type\": \"uint256\" }, { \"internalType\": \"uint32\", \"name\": \"callbackGasLimit\", \"type\": \"uint32\" }], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"have\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"want\", \"type\": \"address\" }], \"name\": \"OnlyCoordinatorCanFulfill\", \"type\": \"error\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"have\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"coordinator\", \"type\": \"address\" }], \"name\": \"OnlyOwnerOrCoordinator\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"Raffle__NotEnoughEthSent\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"Raffle__RaffleNotOpen\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"Raffle__TransforFailed\", \"type\": \"error\" }, { \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"currentBalance\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"numPlayers\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"raffleState\", \"type\": \"uint256\" }], \"name\": \"Raffle__UpkeepNotNeeded\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"ZeroAddress\", \"type\": \"error\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": false, \"internalType\": \"address\", \"name\": \"vrfCoordinator\", \"type\": \"address\" }], \"name\": \"CoordinatorSet\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"player\", \"type\": \"address\" }], \"name\": \"EnteredRaffle\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }], \"name\": \"OwnershipTransferRequested\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }], \"name\": \"OwnershipTransferred\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"winner\", \"type\": \"address\" }], \"name\": \"PickedWinner\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"requestId\", \"type\": \"uint256\" }], \"name\": \"RequestedRaffleWinner\", \"type\": \"event\" }, { \"inputs\": [], \"name\": \"acceptOwnership\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"bytes\", \"name\": \"\", \"type\": \"bytes\" }], \"name\": \"checkUpkeep\", \"outputs\": [{ \"internalType\": \"bool\", \"name\": \"upkeepNeeded\", \"type\": \"bool\" }, { \"internalType\": \"bytes\", \"name\": \"\", \"type\": \"bytes\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"enterRaffle\", \"outputs\": [], \"stateMutability\": \"payable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getEntranceFee\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getLastTimestamp\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getLengthOfPlayers\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"indexOfPlayers\", \"type\": \"uint256\" }], \"name\": \"getPlayer\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getRaffleState\", \"outputs\": [{ \"internalType\": \"enum Raffle.RaffleState\", \"name\": \"\", \"type\": \"uint8\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getRecentWinner\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"owner\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"bytes\", \"name\": \"\", \"type\": \"bytes\" }], \"name\": \"performUpkeep\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"requestId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256[]\", \"name\": \"randomWords\", \"type\": \"uint256[]\" }], \"name\": \"rawFulfillRandomWords\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"s_vrfCoordinator\", \"outputs\": [{ \"internalType\": \"contract IVRFCoordinatorV2Plus\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_vrfCoordinator\", \"type\": \"address\" }], \"name\": \"setCoordinator\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }], \"name\": \"transferOwnership\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }]\n// ];\n// const raffleAddress = 0x3e670fEd42c2eEdD6d2cfC10e03f8e5840b4865F; // 部署的合约地址\n\n// function App() {\n//     // 应用状态\n//     const [web3, setWeb3] = useState(null);\n//     const [contract, setContract] = useState(null);\n//     const [account, setAccount] = useState(null);\n//     const [entranceFee, setEntranceFee] = useState(null);\n//     const [players, setPlayers] = useState([]);\n//     const [recentWinner, setRecentWinner] = useState(null);\n//     const [raffleState, setRaffleState] = useState(null);\n//     const [balance, setBalance] = useState(null);\n\n//     // 初始化 Web3 和合约\n//     useEffect(() => {\n//         async function loadWeb3() {\n//             if (window.ethereum) {\n//                 try {\n//                     const web3 = new Web3(window.ethereum);\n//                     setWeb3(web3);\n\n//                     const accounts = await web3.eth.requestAccounts();\n//                     setAccount(accounts[0]);\n\n//                     const raffleContract = new web3.eth.Contract(raffleABI, raffleAddress);\n//                     setContract(raffleContract);\n//                 } catch (error) {\n//                     console.error(\"Error initializing web3: \", error);\n//                 }\n//             } else {\n//                 console.error(\"Please install MetaMask!\");\n//             }\n//         }\n//         loadWeb3();\n//     }, []);\n\n//     // 加载合约状态：获取入场费用、玩家、上次获胜者等信息\n//     useEffect(() => {\n//         if (contract && account) {\n//             async function fetchRaffleData() {\n//                 try {\n//                     const entranceFee = await contract.methods.getEntranceFee().call();\n//                     setEntranceFee(web3.utils.fromWei(entranceFee, \"ether\"));\n\n//                     const playerCount = await contract.methods.getLengthOfPlayers().call();\n//                     let playersArray = [];\n//                     for (let i = 0; i < playerCount; i++) {\n//                         const player = await contract.methods.getPlayer(i).call();\n//                         playersArray.push(player);\n//                     }\n//                     setPlayers(playersArray);\n\n//                     const recentWinner = await contract.methods.getRecentWinner().call();\n//                     setRecentWinner(recentWinner);\n\n//                     const raffleState = await contract.methods.getRaffleState().call();\n//                     setRaffleState(raffleState);\n\n//                     const contractBalance = await web3.eth.getBalance(raffleAddress);\n//                     setBalance(web3.utils.fromWei(contractBalance, \"ether\"));\n//                 } catch (error) {\n//                     console.error(\"Error fetching raffle data: \", error);\n//                 }\n//             }\n//             fetchRaffleData();\n//         }\n//     }, [contract, account, web3]);\n\n//     // 用户进入 Raffle 合约\n//     const enterRaffle = async () => {\n//         if (contract && account) {\n//             try {\n//                 await contract.methods.enterRaffle().send({\n//                     from: account,\n//                     value: web3.utils.toWei(entranceFee, \"ether\"),\n//                 });\n//                 alert(\"Successfully entered the raffle!\");\n//                 window.location.reload();\n//             } catch (error) {\n//                 console.error(\"Error entering raffle: \", error);\n//             }\n//         }\n//     };\n\n//     return (\n//         <div className=\"App\">\n//             <h1>Decentralized Raffle DApp</h1>\n//             <p>\n//                 <strong>Connected Account:</strong> {account ? account : \"Not connected\"}\n//             </p>\n\n//             <div>\n//                 <h2>Raffle Details</h2>\n//                 <p>\n//                     <strong>Entrance Fee:</strong> {entranceFee ? `${entranceFee} ETH` : \"Loading...\"}\n//                 </p>\n//                 <p>\n//                     <strong>Contract Balance:</strong> {balance ? `${balance} ETH` : \"Loading...\"}\n//                 </p>\n//                 <p>\n//                     <strong>Recent Winner:</strong> {recentWinner ? recentWinner : \"None yet\"}\n//                 </p>\n//                 <p>\n//                     <strong>Raffle State:</strong> {raffleState === \"0\" ? \"Open\" : \"Calculating\"}\n//                 </p>\n//                 <p>\n//                     <strong>Players:</strong>\n//                 </p>\n//                 <ul>\n//                     {players.length > 0 ? players.map((player, index) => <li key={index}>{player}</li>) : <p>No players yet</p>}\n//                 </ul>\n//             </div>\n\n//             <div>\n//                 <h2>Enter the Raffle</h2>\n//                 <button onClick={enterRaffle}>Enter Raffle</button>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","ethers","RaffleABI","jsxDEV","_jsxDEV","raffleAddress","App","_s","account","setAccount","entranceFee","setEntranceFee","contractBalance","setContractBalance","recentWinner","setRecentWinner","raffleState","setRaffleState","players","setPlayers","connectWallet","window","ethereum","accounts","request","method","alert","loadContractData","provider","providers","Web3Provider","contract","Contract","fee","getEntranceFee","utils","formatEther","balance","getBalance","winner","getRecentWinner","state","getRaffleState","numPlayers","getLengthOfPlayers","playerList","i","player","getPlayer","push","error","console","enterRaffle","signer","getSigner","transaction","value","wait","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","index","onClick","_c","$RefreshReg$"],"sources":["/Users/meite/Desktop/X/ECNU/Blockchain/solidity-24/foundry-f24/raffle/raffle-dapp/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport './App.css';\nimport RaffleABI from './RaffleABI.json'; // 导入你的合约 ABI\n\nconst raffleAddress = 0x3e670fEd42c2eEdD6d2cfC10e03f8e5840b4865F; // 请替换为你的合约地址\n\nfunction App() {\n    const [account, setAccount] = useState(null);\n    const [entranceFee, setEntranceFee] = useState(\"Loading...\");\n    const [contractBalance, setContractBalance] = useState(\"Loading...\");\n    const [recentWinner, setRecentWinner] = useState(\"None yet\");\n    const [raffleState, setRaffleState] = useState(\"Loading...\");\n    const [players, setPlayers] = useState([]);\n\n    const connectWallet = async () => {\n        if (window.ethereum) {\n            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n            setAccount(accounts[0]);\n        } else {\n            alert(\"Please install Metamask!\");\n        }\n    };\n\n    const loadContractData = async () => {\n        if (!window.ethereum) return;\n\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const contract = new ethers.Contract(raffleAddress, RaffleABI, provider);\n\n        try {\n            // 获取 Entrance Fee\n            const fee = await contract.getEntranceFee();\n            setEntranceFee(ethers.utils.formatEther(fee));\n\n            // 获取合约余额\n            const balance = await provider.getBalance(raffleAddress);\n            setContractBalance(ethers.utils.formatEther(balance));\n\n            // 获取最近赢家\n            const winner = await contract.getRecentWinner();\n            setRecentWinner(winner);\n\n            // 获取抽奖状态\n            const state = await contract.getRaffleState();\n            setRaffleState(state === 0 ? \"Open\" : \"Calculating\");\n\n            // 获取玩家数量\n            const numPlayers = await contract.getLengthOfPlayers();\n            let playerList = [];\n            for (let i = 0; i < numPlayers; i++) {\n                const player = await contract.getPlayer(i);\n                playerList.push(player);\n            }\n            setPlayers(playerList);\n        } catch (error) {\n            console.error(\"Error loading contract data:\", error);\n        }\n    };\n\n    const enterRaffle = async () => {\n        if (!window.ethereum) {\n            alert(\"Please install Metamask!\");\n            return;\n        }\n\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(raffleAddress, RaffleABI, signer);\n\n        try {\n            const fee = await contract.getEntranceFee();\n            const transaction = await contract.enterRaffle({ value: fee });\n            await transaction.wait();\n            alert(\"You have successfully entered the raffle!\");\n        } catch (error) {\n            console.error(\"Error entering the raffle:\", error);\n        }\n    };\n\n    useEffect(() => {\n        connectWallet();\n        loadContractData();\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <h1>Decentralized Raffle DApp</h1>\n            <p>Connected Account: {account}</p>\n            <h2>Raffle Details</h2>\n            <p>Entrance Fee: {entranceFee} ETH</p>\n            <p>Contract Balance: {contractBalance} ETH</p>\n            <p>Recent Winner: {recentWinner}</p>\n            <p>Raffle State: {raffleState}</p>\n            <p>Players:</p>\n            <ul>\n                {players.length === 0 ? <li>No players yet</li> : players.map((player, index) => <li key={index}>{player}</li>)}\n            </ul>\n            <button onClick={enterRaffle}>Enter Raffle</button>\n        </div>\n    );\n}\n\nexport default App;\n\n// // App.js\n// import React, { useState, useEffect } from \"react\";\n// import Web3 from \"web3\";\n\n// // 合约 ABI 和地址\n// const raffleABI = [\n//     [{ \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"entranceFee\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"interval\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"vrfCoordinator\", \"type\": \"address\" }, { \"internalType\": \"bytes32\", \"name\": \"gasLane\", \"type\": \"bytes32\" }, { \"internalType\": \"uint256\", \"name\": \"subscriptionId\", \"type\": \"uint256\" }, { \"internalType\": \"uint32\", \"name\": \"callbackGasLimit\", \"type\": \"uint32\" }], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"have\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"want\", \"type\": \"address\" }], \"name\": \"OnlyCoordinatorCanFulfill\", \"type\": \"error\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"have\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"coordinator\", \"type\": \"address\" }], \"name\": \"OnlyOwnerOrCoordinator\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"Raffle__NotEnoughEthSent\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"Raffle__RaffleNotOpen\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"Raffle__TransforFailed\", \"type\": \"error\" }, { \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"currentBalance\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"numPlayers\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"raffleState\", \"type\": \"uint256\" }], \"name\": \"Raffle__UpkeepNotNeeded\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"ZeroAddress\", \"type\": \"error\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": false, \"internalType\": \"address\", \"name\": \"vrfCoordinator\", \"type\": \"address\" }], \"name\": \"CoordinatorSet\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"player\", \"type\": \"address\" }], \"name\": \"EnteredRaffle\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }], \"name\": \"OwnershipTransferRequested\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }], \"name\": \"OwnershipTransferred\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"winner\", \"type\": \"address\" }], \"name\": \"PickedWinner\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"requestId\", \"type\": \"uint256\" }], \"name\": \"RequestedRaffleWinner\", \"type\": \"event\" }, { \"inputs\": [], \"name\": \"acceptOwnership\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"bytes\", \"name\": \"\", \"type\": \"bytes\" }], \"name\": \"checkUpkeep\", \"outputs\": [{ \"internalType\": \"bool\", \"name\": \"upkeepNeeded\", \"type\": \"bool\" }, { \"internalType\": \"bytes\", \"name\": \"\", \"type\": \"bytes\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"enterRaffle\", \"outputs\": [], \"stateMutability\": \"payable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getEntranceFee\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getLastTimestamp\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getLengthOfPlayers\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"indexOfPlayers\", \"type\": \"uint256\" }], \"name\": \"getPlayer\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getRaffleState\", \"outputs\": [{ \"internalType\": \"enum Raffle.RaffleState\", \"name\": \"\", \"type\": \"uint8\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getRecentWinner\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"owner\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"bytes\", \"name\": \"\", \"type\": \"bytes\" }], \"name\": \"performUpkeep\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"requestId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256[]\", \"name\": \"randomWords\", \"type\": \"uint256[]\" }], \"name\": \"rawFulfillRandomWords\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"s_vrfCoordinator\", \"outputs\": [{ \"internalType\": \"contract IVRFCoordinatorV2Plus\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_vrfCoordinator\", \"type\": \"address\" }], \"name\": \"setCoordinator\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }], \"name\": \"transferOwnership\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }]\n// ];\n// const raffleAddress = 0x3e670fEd42c2eEdD6d2cfC10e03f8e5840b4865F; // 部署的合约地址\n\n// function App() {\n//     // 应用状态\n//     const [web3, setWeb3] = useState(null);\n//     const [contract, setContract] = useState(null);\n//     const [account, setAccount] = useState(null);\n//     const [entranceFee, setEntranceFee] = useState(null);\n//     const [players, setPlayers] = useState([]);\n//     const [recentWinner, setRecentWinner] = useState(null);\n//     const [raffleState, setRaffleState] = useState(null);\n//     const [balance, setBalance] = useState(null);\n\n//     // 初始化 Web3 和合约\n//     useEffect(() => {\n//         async function loadWeb3() {\n//             if (window.ethereum) {\n//                 try {\n//                     const web3 = new Web3(window.ethereum);\n//                     setWeb3(web3);\n\n//                     const accounts = await web3.eth.requestAccounts();\n//                     setAccount(accounts[0]);\n\n//                     const raffleContract = new web3.eth.Contract(raffleABI, raffleAddress);\n//                     setContract(raffleContract);\n//                 } catch (error) {\n//                     console.error(\"Error initializing web3: \", error);\n//                 }\n//             } else {\n//                 console.error(\"Please install MetaMask!\");\n//             }\n//         }\n//         loadWeb3();\n//     }, []);\n\n//     // 加载合约状态：获取入场费用、玩家、上次获胜者等信息\n//     useEffect(() => {\n//         if (contract && account) {\n//             async function fetchRaffleData() {\n//                 try {\n//                     const entranceFee = await contract.methods.getEntranceFee().call();\n//                     setEntranceFee(web3.utils.fromWei(entranceFee, \"ether\"));\n\n//                     const playerCount = await contract.methods.getLengthOfPlayers().call();\n//                     let playersArray = [];\n//                     for (let i = 0; i < playerCount; i++) {\n//                         const player = await contract.methods.getPlayer(i).call();\n//                         playersArray.push(player);\n//                     }\n//                     setPlayers(playersArray);\n\n//                     const recentWinner = await contract.methods.getRecentWinner().call();\n//                     setRecentWinner(recentWinner);\n\n//                     const raffleState = await contract.methods.getRaffleState().call();\n//                     setRaffleState(raffleState);\n\n//                     const contractBalance = await web3.eth.getBalance(raffleAddress);\n//                     setBalance(web3.utils.fromWei(contractBalance, \"ether\"));\n//                 } catch (error) {\n//                     console.error(\"Error fetching raffle data: \", error);\n//                 }\n//             }\n//             fetchRaffleData();\n//         }\n//     }, [contract, account, web3]);\n\n//     // 用户进入 Raffle 合约\n//     const enterRaffle = async () => {\n//         if (contract && account) {\n//             try {\n//                 await contract.methods.enterRaffle().send({\n//                     from: account,\n//                     value: web3.utils.toWei(entranceFee, \"ether\"),\n//                 });\n//                 alert(\"Successfully entered the raffle!\");\n//                 window.location.reload();\n//             } catch (error) {\n//                 console.error(\"Error entering raffle: \", error);\n//             }\n//         }\n//     };\n\n//     return (\n//         <div className=\"App\">\n//             <h1>Decentralized Raffle DApp</h1>\n//             <p>\n//                 <strong>Connected Account:</strong> {account ? account : \"Not connected\"}\n//             </p>\n\n//             <div>\n//                 <h2>Raffle Details</h2>\n//                 <p>\n//                     <strong>Entrance Fee:</strong> {entranceFee ? `${entranceFee} ETH` : \"Loading...\"}\n//                 </p>\n//                 <p>\n//                     <strong>Contract Balance:</strong> {balance ? `${balance} ETH` : \"Loading...\"}\n//                 </p>\n//                 <p>\n//                     <strong>Recent Winner:</strong> {recentWinner ? recentWinner : \"None yet\"}\n//                 </p>\n//                 <p>\n//                     <strong>Raffle State:</strong> {raffleState === \"0\" ? \"Open\" : \"Calculating\"}\n//                 </p>\n//                 <p>\n//                     <strong>Players:</strong>\n//                 </p>\n//                 <ul>\n//                     {players.length > 0 ? players.map((player, index) => <li key={index}>{player}</li>) : <p>No players yet</p>}\n//                 </ul>\n//             </div>\n\n//             <div>\n//                 <h2>Enter the Raffle</h2>\n//                 <button onClick={enterRaffle}>Enter Raffle</button>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default App;"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}