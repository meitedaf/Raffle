{"ast":null,"code":"var _jsxFileName = \"/Users/meite/Desktop/X/ECNU/Blockchain/solidity-24/foundry-f24/raffle/raffle-dapp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport abi from \"./Raffle.json\"; // 确保你有 ABI 文件\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RaffleApp = () => {\n  _s();\n  const [connectedAccount, setConnectedAccount] = useState(\"\");\n  const [entranceFee, setEntranceFee] = useState(\"Loading...\");\n  const [contractBalance, setContractBalance] = useState(\"Loading...\");\n  const [recentWinner, setRecentWinner] = useState(\"None yet\");\n  const [raffleState, setRaffleState] = useState(\"Loading...\");\n  const [players, setPlayers] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const raffleContractAddress = 0x3e670fEd42c2eEdD6d2cfC10e03f8e5840b4865F; // 替换成你的合约地址\n  const contractAbi = abi; // 从你的 ABI 文件中获取\n\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        if (typeof window.ethereum !== \"undefined\") {\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\n          const signer = provider.getSigner();\n          const raffleContract = new ethers.Contract(raffleContractAddress, contractAbi, signer);\n          const account = await signer.getAddress();\n          setConnectedAccount(account);\n\n          // 获取Entrance Fee\n          const entranceFee = await raffleContract.getEntranceFee();\n          setEntranceFee(ethers.utils.formatEther(entranceFee));\n\n          // 获取Contract Balance\n          const contractBalance = await provider.getBalance(raffleContractAddress);\n          setContractBalance(ethers.utils.formatEther(contractBalance));\n\n          // 获取最近赢家\n          const recentWinner = await raffleContract.getRecentWinner();\n          setRecentWinner(recentWinner);\n\n          // 获取Raffle State\n          const raffleState = await raffleContract.getRaffleState();\n          setRaffleState(raffleState === 0 ? \"Open\" : \"Calculating\");\n\n          // 获取玩家数量\n          const playersArray = [];\n          const playerCount = await raffleContract.getLengthOfPlayers();\n          for (let i = 0; i < playerCount; i++) {\n            const player = await raffleContract.getPlayer(i);\n            playersArray.push(player);\n          }\n          setPlayers(playersArray);\n        }\n      } catch (error) {\n        console.error(\"Error fetching contract data:\", error);\n      }\n    };\n    fetchContractData();\n  }, []);\n  const enterRaffle = async () => {\n    setLoading(true);\n    try {\n      if (typeof window.ethereum !== \"undefined\") {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const raffleContract = new ethers.Contract(raffleContractAddress, contractAbi, signer);\n        const entranceFee = await raffleContract.getEntranceFee();\n        const tx = await raffleContract.enterRaffle({\n          value: entranceFee\n        });\n        await tx.wait();\n        alert(\"Successfully entered the raffle!\");\n      }\n    } catch (error) {\n      console.error(\"Error entering the raffle:\", error);\n      alert(\"Failed to enter the raffle. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Decentralized Raffle DApp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Connected Account: \", connectedAccount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Raffle Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Entrance Fee: \", entranceFee, \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Contract Balance: \", contractBalance, \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Recent Winner: \", recentWinner]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Raffle State: \", raffleState]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Players:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: players.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No players yet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this) : players.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: player\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 52\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: enterRaffle,\n      disabled: loading,\n      children: loading ? \"Entering...\" : \"Enter the Raffle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n};\n_s(RaffleApp, \"lr+JVW5Y3GX73jCR4fwXAuBpnZc=\");\n_c = RaffleApp;\nexport default RaffleApp;\n\n// // App.js\n// import React, { useState, useEffect } from \"react\";\n// import Web3 from \"web3\";\n\n// // 合约 ABI 和地址\n// const raffleABI = [\n//     [{ \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"entranceFee\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"interval\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"vrfCoordinator\", \"type\": \"address\" }, { \"internalType\": \"bytes32\", \"name\": \"gasLane\", \"type\": \"bytes32\" }, { \"internalType\": \"uint256\", \"name\": \"subscriptionId\", \"type\": \"uint256\" }, { \"internalType\": \"uint32\", \"name\": \"callbackGasLimit\", \"type\": \"uint32\" }], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"have\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"want\", \"type\": \"address\" }], \"name\": \"OnlyCoordinatorCanFulfill\", \"type\": \"error\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"have\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"coordinator\", \"type\": \"address\" }], \"name\": \"OnlyOwnerOrCoordinator\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"Raffle__NotEnoughEthSent\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"Raffle__RaffleNotOpen\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"Raffle__TransforFailed\", \"type\": \"error\" }, { \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"currentBalance\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"numPlayers\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"raffleState\", \"type\": \"uint256\" }], \"name\": \"Raffle__UpkeepNotNeeded\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"ZeroAddress\", \"type\": \"error\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": false, \"internalType\": \"address\", \"name\": \"vrfCoordinator\", \"type\": \"address\" }], \"name\": \"CoordinatorSet\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"player\", \"type\": \"address\" }], \"name\": \"EnteredRaffle\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }], \"name\": \"OwnershipTransferRequested\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }], \"name\": \"OwnershipTransferred\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"winner\", \"type\": \"address\" }], \"name\": \"PickedWinner\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"requestId\", \"type\": \"uint256\" }], \"name\": \"RequestedRaffleWinner\", \"type\": \"event\" }, { \"inputs\": [], \"name\": \"acceptOwnership\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"bytes\", \"name\": \"\", \"type\": \"bytes\" }], \"name\": \"checkUpkeep\", \"outputs\": [{ \"internalType\": \"bool\", \"name\": \"upkeepNeeded\", \"type\": \"bool\" }, { \"internalType\": \"bytes\", \"name\": \"\", \"type\": \"bytes\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"enterRaffle\", \"outputs\": [], \"stateMutability\": \"payable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getEntranceFee\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getLastTimestamp\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getLengthOfPlayers\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"indexOfPlayers\", \"type\": \"uint256\" }], \"name\": \"getPlayer\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getRaffleState\", \"outputs\": [{ \"internalType\": \"enum Raffle.RaffleState\", \"name\": \"\", \"type\": \"uint8\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getRecentWinner\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"owner\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"bytes\", \"name\": \"\", \"type\": \"bytes\" }], \"name\": \"performUpkeep\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"requestId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256[]\", \"name\": \"randomWords\", \"type\": \"uint256[]\" }], \"name\": \"rawFulfillRandomWords\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"s_vrfCoordinator\", \"outputs\": [{ \"internalType\": \"contract IVRFCoordinatorV2Plus\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_vrfCoordinator\", \"type\": \"address\" }], \"name\": \"setCoordinator\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }], \"name\": \"transferOwnership\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }]\n// ];\n// const raffleAddress = 0x3e670fEd42c2eEdD6d2cfC10e03f8e5840b4865F; // 部署的合约地址\n\n// function App() {\n//     // 应用状态\n//     const [web3, setWeb3] = useState(null);\n//     const [contract, setContract] = useState(null);\n//     const [account, setAccount] = useState(null);\n//     const [entranceFee, setEntranceFee] = useState(null);\n//     const [players, setPlayers] = useState([]);\n//     const [recentWinner, setRecentWinner] = useState(null);\n//     const [raffleState, setRaffleState] = useState(null);\n//     const [balance, setBalance] = useState(null);\n\n//     // 初始化 Web3 和合约\n//     useEffect(() => {\n//         async function loadWeb3() {\n//             if (window.ethereum) {\n//                 try {\n//                     const web3 = new Web3(window.ethereum);\n//                     setWeb3(web3);\n\n//                     const accounts = await web3.eth.requestAccounts();\n//                     setAccount(accounts[0]);\n\n//                     const raffleContract = new web3.eth.Contract(raffleABI, raffleAddress);\n//                     setContract(raffleContract);\n//                 } catch (error) {\n//                     console.error(\"Error initializing web3: \", error);\n//                 }\n//             } else {\n//                 console.error(\"Please install MetaMask!\");\n//             }\n//         }\n//         loadWeb3();\n//     }, []);\n\n//     // 加载合约状态：获取入场费用、玩家、上次获胜者等信息\n//     useEffect(() => {\n//         if (contract && account) {\n//             async function fetchRaffleData() {\n//                 try {\n//                     const entranceFee = await contract.methods.getEntranceFee().call();\n//                     setEntranceFee(web3.utils.fromWei(entranceFee, \"ether\"));\n\n//                     const playerCount = await contract.methods.getLengthOfPlayers().call();\n//                     let playersArray = [];\n//                     for (let i = 0; i < playerCount; i++) {\n//                         const player = await contract.methods.getPlayer(i).call();\n//                         playersArray.push(player);\n//                     }\n//                     setPlayers(playersArray);\n\n//                     const recentWinner = await contract.methods.getRecentWinner().call();\n//                     setRecentWinner(recentWinner);\n\n//                     const raffleState = await contract.methods.getRaffleState().call();\n//                     setRaffleState(raffleState);\n\n//                     const contractBalance = await web3.eth.getBalance(raffleAddress);\n//                     setBalance(web3.utils.fromWei(contractBalance, \"ether\"));\n//                 } catch (error) {\n//                     console.error(\"Error fetching raffle data: \", error);\n//                 }\n//             }\n//             fetchRaffleData();\n//         }\n//     }, [contract, account, web3]);\n\n//     // 用户进入 Raffle 合约\n//     const enterRaffle = async () => {\n//         if (contract && account) {\n//             try {\n//                 await contract.methods.enterRaffle().send({\n//                     from: account,\n//                     value: web3.utils.toWei(entranceFee, \"ether\"),\n//                 });\n//                 alert(\"Successfully entered the raffle!\");\n//                 window.location.reload();\n//             } catch (error) {\n//                 console.error(\"Error entering raffle: \", error);\n//             }\n//         }\n//     };\n\n//     return (\n//         <div className=\"App\">\n//             <h1>Decentralized Raffle DApp</h1>\n//             <p>\n//                 <strong>Connected Account:</strong> {account ? account : \"Not connected\"}\n//             </p>\n\n//             <div>\n//                 <h2>Raffle Details</h2>\n//                 <p>\n//                     <strong>Entrance Fee:</strong> {entranceFee ? `${entranceFee} ETH` : \"Loading...\"}\n//                 </p>\n//                 <p>\n//                     <strong>Contract Balance:</strong> {balance ? `${balance} ETH` : \"Loading...\"}\n//                 </p>\n//                 <p>\n//                     <strong>Recent Winner:</strong> {recentWinner ? recentWinner : \"None yet\"}\n//                 </p>\n//                 <p>\n//                     <strong>Raffle State:</strong> {raffleState === \"0\" ? \"Open\" : \"Calculating\"}\n//                 </p>\n//                 <p>\n//                     <strong>Players:</strong>\n//                 </p>\n//                 <ul>\n//                     {players.length > 0 ? players.map((player, index) => <li key={index}>{player}</li>) : <p>No players yet</p>}\n//                 </ul>\n//             </div>\n\n//             <div>\n//                 <h2>Enter the Raffle</h2>\n//                 <button onClick={enterRaffle}>Enter Raffle</button>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"RaffleApp\");","map":{"version":3,"names":["React","useState","useEffect","ethers","abi","jsxDEV","_jsxDEV","RaffleApp","_s","connectedAccount","setConnectedAccount","entranceFee","setEntranceFee","contractBalance","setContractBalance","recentWinner","setRecentWinner","raffleState","setRaffleState","players","setPlayers","loading","setLoading","raffleContractAddress","contractAbi","fetchContractData","window","ethereum","provider","providers","Web3Provider","signer","getSigner","raffleContract","Contract","account","getAddress","getEntranceFee","utils","formatEther","getBalance","getRecentWinner","getRaffleState","playersArray","playerCount","getLengthOfPlayers","i","player","getPlayer","push","error","console","enterRaffle","tx","value","wait","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","index","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/meite/Desktop/X/ECNU/Blockchain/solidity-24/foundry-f24/raffle/raffle-dapp/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport abi from \"./Raffle.json\"; // 确保你有 ABI 文件\n\nconst RaffleApp = () => {\n    const [connectedAccount, setConnectedAccount] = useState(\"\");\n    const [entranceFee, setEntranceFee] = useState(\"Loading...\");\n    const [contractBalance, setContractBalance] = useState(\"Loading...\");\n    const [recentWinner, setRecentWinner] = useState(\"None yet\");\n    const [raffleState, setRaffleState] = useState(\"Loading...\");\n    const [players, setPlayers] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    const raffleContractAddress = 0x3e670fEd42c2eEdD6d2cfC10e03f8e5840b4865F; // 替换成你的合约地址\n    const contractAbi = abi; // 从你的 ABI 文件中获取\n\n    useEffect(() => {\n        const fetchContractData = async () => {\n            try {\n                if (typeof window.ethereum !== \"undefined\") {\n                    const provider = new ethers.providers.Web3Provider(window.ethereum);\n                    const signer = provider.getSigner();\n                    const raffleContract = new ethers.Contract(\n                        raffleContractAddress,\n                        contractAbi,\n                        signer\n                    );\n\n                    const account = await signer.getAddress();\n                    setConnectedAccount(account);\n\n                    // 获取Entrance Fee\n                    const entranceFee = await raffleContract.getEntranceFee();\n                    setEntranceFee(ethers.utils.formatEther(entranceFee));\n\n                    // 获取Contract Balance\n                    const contractBalance = await provider.getBalance(raffleContractAddress);\n                    setContractBalance(ethers.utils.formatEther(contractBalance));\n\n                    // 获取最近赢家\n                    const recentWinner = await raffleContract.getRecentWinner();\n                    setRecentWinner(recentWinner);\n\n                    // 获取Raffle State\n                    const raffleState = await raffleContract.getRaffleState();\n                    setRaffleState(raffleState === 0 ? \"Open\" : \"Calculating\");\n\n                    // 获取玩家数量\n                    const playersArray = [];\n                    const playerCount = await raffleContract.getLengthOfPlayers();\n                    for (let i = 0; i < playerCount; i++) {\n                        const player = await raffleContract.getPlayer(i);\n                        playersArray.push(player);\n                    }\n                    setPlayers(playersArray);\n                }\n            } catch (error) {\n                console.error(\"Error fetching contract data:\", error);\n            }\n        };\n\n        fetchContractData();\n    }, []);\n\n    const enterRaffle = async () => {\n        setLoading(true);\n        try {\n            if (typeof window.ethereum !== \"undefined\") {\n                const provider = new ethers.providers.Web3Provider(window.ethereum);\n                const signer = provider.getSigner();\n                const raffleContract = new ethers.Contract(\n                    raffleContractAddress,\n                    contractAbi,\n                    signer\n                );\n\n                const entranceFee = await raffleContract.getEntranceFee();\n                const tx = await raffleContract.enterRaffle({ value: entranceFee });\n                await tx.wait();\n                alert(\"Successfully entered the raffle!\");\n            }\n        } catch (error) {\n            console.error(\"Error entering the raffle:\", error);\n            alert(\"Failed to enter the raffle. Please try again.\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <div>\n            <h1>Decentralized Raffle DApp</h1>\n            <p>Connected Account: {connectedAccount}</p>\n\n            <h2>Raffle Details</h2>\n            <p>Entrance Fee: {entranceFee} ETH</p>\n            <p>Contract Balance: {contractBalance} ETH</p>\n            <p>Recent Winner: {recentWinner}</p>\n            <p>Raffle State: {raffleState}</p>\n            <p>Players:</p>\n            <ul>\n                {players.length === 0 ? (\n                    <p>No players yet</p>\n                ) : (\n                    players.map((player, index) => <li key={index}>{player}</li>)\n                )}\n            </ul>\n\n            <button onClick={enterRaffle} disabled={loading}>\n                {loading ? \"Entering...\" : \"Enter the Raffle\"}\n            </button>\n        </div>\n    );\n};\n\nexport default RaffleApp;\n\n// // App.js\n// import React, { useState, useEffect } from \"react\";\n// import Web3 from \"web3\";\n\n// // 合约 ABI 和地址\n// const raffleABI = [\n//     [{ \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"entranceFee\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"interval\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"vrfCoordinator\", \"type\": \"address\" }, { \"internalType\": \"bytes32\", \"name\": \"gasLane\", \"type\": \"bytes32\" }, { \"internalType\": \"uint256\", \"name\": \"subscriptionId\", \"type\": \"uint256\" }, { \"internalType\": \"uint32\", \"name\": \"callbackGasLimit\", \"type\": \"uint32\" }], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"have\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"want\", \"type\": \"address\" }], \"name\": \"OnlyCoordinatorCanFulfill\", \"type\": \"error\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"have\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"coordinator\", \"type\": \"address\" }], \"name\": \"OnlyOwnerOrCoordinator\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"Raffle__NotEnoughEthSent\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"Raffle__RaffleNotOpen\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"Raffle__TransforFailed\", \"type\": \"error\" }, { \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"currentBalance\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"numPlayers\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"raffleState\", \"type\": \"uint256\" }], \"name\": \"Raffle__UpkeepNotNeeded\", \"type\": \"error\" }, { \"inputs\": [], \"name\": \"ZeroAddress\", \"type\": \"error\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": false, \"internalType\": \"address\", \"name\": \"vrfCoordinator\", \"type\": \"address\" }], \"name\": \"CoordinatorSet\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"player\", \"type\": \"address\" }], \"name\": \"EnteredRaffle\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }], \"name\": \"OwnershipTransferRequested\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }], \"name\": \"OwnershipTransferred\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"winner\", \"type\": \"address\" }], \"name\": \"PickedWinner\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"requestId\", \"type\": \"uint256\" }], \"name\": \"RequestedRaffleWinner\", \"type\": \"event\" }, { \"inputs\": [], \"name\": \"acceptOwnership\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"bytes\", \"name\": \"\", \"type\": \"bytes\" }], \"name\": \"checkUpkeep\", \"outputs\": [{ \"internalType\": \"bool\", \"name\": \"upkeepNeeded\", \"type\": \"bool\" }, { \"internalType\": \"bytes\", \"name\": \"\", \"type\": \"bytes\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"enterRaffle\", \"outputs\": [], \"stateMutability\": \"payable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getEntranceFee\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getLastTimestamp\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getLengthOfPlayers\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"indexOfPlayers\", \"type\": \"uint256\" }], \"name\": \"getPlayer\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getRaffleState\", \"outputs\": [{ \"internalType\": \"enum Raffle.RaffleState\", \"name\": \"\", \"type\": \"uint8\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getRecentWinner\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"owner\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"bytes\", \"name\": \"\", \"type\": \"bytes\" }], \"name\": \"performUpkeep\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"requestId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256[]\", \"name\": \"randomWords\", \"type\": \"uint256[]\" }], \"name\": \"rawFulfillRandomWords\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"s_vrfCoordinator\", \"outputs\": [{ \"internalType\": \"contract IVRFCoordinatorV2Plus\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_vrfCoordinator\", \"type\": \"address\" }], \"name\": \"setCoordinator\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }], \"name\": \"transferOwnership\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }]\n// ];\n// const raffleAddress = 0x3e670fEd42c2eEdD6d2cfC10e03f8e5840b4865F; // 部署的合约地址\n\n// function App() {\n//     // 应用状态\n//     const [web3, setWeb3] = useState(null);\n//     const [contract, setContract] = useState(null);\n//     const [account, setAccount] = useState(null);\n//     const [entranceFee, setEntranceFee] = useState(null);\n//     const [players, setPlayers] = useState([]);\n//     const [recentWinner, setRecentWinner] = useState(null);\n//     const [raffleState, setRaffleState] = useState(null);\n//     const [balance, setBalance] = useState(null);\n\n//     // 初始化 Web3 和合约\n//     useEffect(() => {\n//         async function loadWeb3() {\n//             if (window.ethereum) {\n//                 try {\n//                     const web3 = new Web3(window.ethereum);\n//                     setWeb3(web3);\n\n//                     const accounts = await web3.eth.requestAccounts();\n//                     setAccount(accounts[0]);\n\n//                     const raffleContract = new web3.eth.Contract(raffleABI, raffleAddress);\n//                     setContract(raffleContract);\n//                 } catch (error) {\n//                     console.error(\"Error initializing web3: \", error);\n//                 }\n//             } else {\n//                 console.error(\"Please install MetaMask!\");\n//             }\n//         }\n//         loadWeb3();\n//     }, []);\n\n//     // 加载合约状态：获取入场费用、玩家、上次获胜者等信息\n//     useEffect(() => {\n//         if (contract && account) {\n//             async function fetchRaffleData() {\n//                 try {\n//                     const entranceFee = await contract.methods.getEntranceFee().call();\n//                     setEntranceFee(web3.utils.fromWei(entranceFee, \"ether\"));\n\n//                     const playerCount = await contract.methods.getLengthOfPlayers().call();\n//                     let playersArray = [];\n//                     for (let i = 0; i < playerCount; i++) {\n//                         const player = await contract.methods.getPlayer(i).call();\n//                         playersArray.push(player);\n//                     }\n//                     setPlayers(playersArray);\n\n//                     const recentWinner = await contract.methods.getRecentWinner().call();\n//                     setRecentWinner(recentWinner);\n\n//                     const raffleState = await contract.methods.getRaffleState().call();\n//                     setRaffleState(raffleState);\n\n//                     const contractBalance = await web3.eth.getBalance(raffleAddress);\n//                     setBalance(web3.utils.fromWei(contractBalance, \"ether\"));\n//                 } catch (error) {\n//                     console.error(\"Error fetching raffle data: \", error);\n//                 }\n//             }\n//             fetchRaffleData();\n//         }\n//     }, [contract, account, web3]);\n\n//     // 用户进入 Raffle 合约\n//     const enterRaffle = async () => {\n//         if (contract && account) {\n//             try {\n//                 await contract.methods.enterRaffle().send({\n//                     from: account,\n//                     value: web3.utils.toWei(entranceFee, \"ether\"),\n//                 });\n//                 alert(\"Successfully entered the raffle!\");\n//                 window.location.reload();\n//             } catch (error) {\n//                 console.error(\"Error entering raffle: \", error);\n//             }\n//         }\n//     };\n\n//     return (\n//         <div className=\"App\">\n//             <h1>Decentralized Raffle DApp</h1>\n//             <p>\n//                 <strong>Connected Account:</strong> {account ? account : \"Not connected\"}\n//             </p>\n\n//             <div>\n//                 <h2>Raffle Details</h2>\n//                 <p>\n//                     <strong>Entrance Fee:</strong> {entranceFee ? `${entranceFee} ETH` : \"Loading...\"}\n//                 </p>\n//                 <p>\n//                     <strong>Contract Balance:</strong> {balance ? `${balance} ETH` : \"Loading...\"}\n//                 </p>\n//                 <p>\n//                     <strong>Recent Winner:</strong> {recentWinner ? recentWinner : \"None yet\"}\n//                 </p>\n//                 <p>\n//                     <strong>Raffle State:</strong> {raffleState === \"0\" ? \"Open\" : \"Calculating\"}\n//                 </p>\n//                 <p>\n//                     <strong>Players:</strong>\n//                 </p>\n//                 <ul>\n//                     {players.length > 0 ? players.map((player, index) => <li key={index}>{player}</li>) : <p>No players yet</p>}\n//                 </ul>\n//             </div>\n\n//             <div>\n//                 <h2>Enter the Raffle</h2>\n//                 <button onClick={enterRaffle}>Enter Raffle</button>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default App;"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}