{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ContractExecutionError, InvalidResponseError, ProviderError, ResponseError, rpcErrorsMap, RpcError } from 'web3-errors';\nimport HttpProvider from 'web3-providers-http';\nimport WSProvider from 'web3-providers-ws';\nimport { isNullish, isPromise, jsonRpc, isResponseRpcError } from 'web3-utils';\nimport { isEIP1193Provider, isLegacyRequestProvider, isLegacySendAsyncProvider, isLegacySendProvider, isWeb3Provider } from './utils.js';\nimport { Web3EventEmitter } from './web3_event_emitter.js';\nexport var Web3RequestManagerEvent;\n(function (Web3RequestManagerEvent) {\n  Web3RequestManagerEvent[\"PROVIDER_CHANGED\"] = \"PROVIDER_CHANGED\";\n  Web3RequestManagerEvent[\"BEFORE_PROVIDER_CHANGE\"] = \"BEFORE_PROVIDER_CHANGE\";\n})(Web3RequestManagerEvent || (Web3RequestManagerEvent = {}));\nconst availableProviders = {\n  HttpProvider: HttpProvider,\n  WebsocketProvider: WSProvider\n};\nexport class Web3RequestManager extends Web3EventEmitter {\n  constructor(provider, useRpcCallSpecification, requestManagerMiddleware) {\n    super();\n    if (!isNullish(provider)) {\n      this.setProvider(provider);\n    }\n    this.useRpcCallSpecification = useRpcCallSpecification;\n    if (!isNullish(requestManagerMiddleware)) this.middleware = requestManagerMiddleware;\n  }\n  /**\n   * Will return all available providers\n   */\n  static get providers() {\n    return availableProviders;\n  }\n  /**\n   * Will return the current provider.\n   *\n   * @returns Returns the current provider\n   */\n  get provider() {\n    return this._provider;\n  }\n  /**\n   * Will return all available providers\n   */\n  // eslint-disable-next-line class-methods-use-this\n  get providers() {\n    return availableProviders;\n  }\n  /**\n   * Use to set provider. Provider can be a provider instance or a string.\n   *\n   * @param provider - The provider to set\n   */\n  setProvider(provider) {\n    let newProvider;\n    // autodetect provider\n    if (provider && typeof provider === 'string' && this.providers) {\n      // HTTP\n      if (/^http(s)?:\\/\\//i.test(provider)) {\n        newProvider = new this.providers.HttpProvider(provider);\n        // WS\n      } else if (/^ws(s)?:\\/\\//i.test(provider)) {\n        newProvider = new this.providers.WebsocketProvider(provider);\n      } else {\n        throw new ProviderError(`Can't autodetect provider for \"${provider}\"`);\n      }\n    } else if (isNullish(provider)) {\n      // In case want to unset the provider\n      newProvider = undefined;\n    } else {\n      newProvider = provider;\n    }\n    this.emit(Web3RequestManagerEvent.BEFORE_PROVIDER_CHANGE, this._provider);\n    this._provider = newProvider;\n    this.emit(Web3RequestManagerEvent.PROVIDER_CHANGED, this._provider);\n    return true;\n  }\n  setMiddleware(requestManagerMiddleware) {\n    this.middleware = requestManagerMiddleware;\n  }\n  /**\n   *\n   * Will execute a request\n   *\n   * @param request - {@link Web3APIRequest} The request to send\n   *\n   * @returns The response of the request {@link ResponseType}. If there is error\n   * in the response, will throw an error\n   */\n  send(request) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const requestObj = Object.assign({}, request);\n      let response = yield this._sendRequest(requestObj);\n      if (!isNullish(this.middleware)) response = yield this.middleware.processResponse(response);\n      if (jsonRpc.isResponseWithResult(response)) {\n        return response.result;\n      }\n      throw new ResponseError(response);\n    });\n  }\n  /**\n   * Same as send, but, will execute a batch of requests\n   *\n   * @param request {@link JsonRpcBatchRequest} The batch request to send\n   */\n  sendBatch(request) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const response = yield this._sendRequest(request);\n      return response;\n    });\n  }\n  _sendRequest(request) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider\n      } = this;\n      if (isNullish(provider)) {\n        throw new ProviderError('Provider not available. Use `.setProvider` or `.provider=` to initialize the provider.');\n      }\n      let payload = jsonRpc.isBatchRequest(request) ? jsonRpc.toBatchPayload(request) : jsonRpc.toPayload(request);\n      if (!isNullish(this.middleware)) {\n        payload = yield this.middleware.processRequest(payload);\n      }\n      if (isWeb3Provider(provider)) {\n        let response;\n        try {\n          response = yield provider.request(payload);\n        } catch (error) {\n          // Check if the provider throw an error instead of reject with error\n          response = error;\n        }\n        return this._processJsonRpcResponse(payload, response, {\n          legacy: false,\n          error: false\n        });\n      }\n      if (isEIP1193Provider(provider)) {\n        return provider.request(payload).then(res => this._processJsonRpcResponse(payload, res, {\n          legacy: true,\n          error: false\n        })).catch(error => this._processJsonRpcResponse(payload, error, {\n          legacy: true,\n          error: true\n        }));\n      }\n      // TODO: This could be deprecated and removed.\n      if (isLegacyRequestProvider(provider)) {\n        return new Promise((resolve, reject) => {\n          const rejectWithError = err => {\n            reject(this._processJsonRpcResponse(payload, err, {\n              legacy: true,\n              error: true\n            }));\n          };\n          const resolveWithResponse = response => resolve(this._processJsonRpcResponse(payload, response, {\n            legacy: true,\n            error: false\n          }));\n          const result = provider.request(payload,\n          // a callback that is expected to be called after getting the response:\n          (err, response) => {\n            if (err) {\n              return rejectWithError(err);\n            }\n            return resolveWithResponse(response);\n          });\n          // Some providers, that follow a previous drafted version of EIP1193, has a `request` function\n          //\tthat is not defined as `async`, but it returns a promise.\n          // Such providers would not be picked with if(isEIP1193Provider(provider)) above\n          //\tbecause the `request` function was not defined with `async` and so the function definition is not `AsyncFunction`.\n          // Like this provider: https://github.dev/NomicFoundation/hardhat/blob/62bea2600785595ba36f2105564076cf5cdf0fd8/packages/hardhat-core/src/internal/core/providers/backwards-compatibility.ts#L19\n          // So check if the returned result is a Promise, and resolve with it accordingly.\n          // Note: in this case we expect the callback provided above to never be called.\n          if (isPromise(result)) {\n            const responsePromise = result;\n            responsePromise.then(resolveWithResponse).catch(error => {\n              try {\n                // Attempt to process the error response\n                const processedError = this._processJsonRpcResponse(payload, error, {\n                  legacy: true,\n                  error: true\n                });\n                reject(processedError);\n              } catch (processingError) {\n                // Catch any errors that occur during the error processing\n                reject(processingError);\n              }\n            });\n          }\n        });\n      }\n      // TODO: This could be deprecated and removed.\n      if (isLegacySendProvider(provider)) {\n        return new Promise((resolve, reject) => {\n          provider.send(payload, (err, response) => {\n            if (err) {\n              return reject(this._processJsonRpcResponse(payload, err, {\n                legacy: true,\n                error: true\n              }));\n            }\n            if (isNullish(response)) {\n              throw new ResponseError({}, 'Got a \"nullish\" response from provider.');\n            }\n            return resolve(this._processJsonRpcResponse(payload, response, {\n              legacy: true,\n              error: false\n            }));\n          });\n        });\n      }\n      // TODO: This could be deprecated and removed.\n      if (isLegacySendAsyncProvider(provider)) {\n        return provider.sendAsync(payload).then(response => this._processJsonRpcResponse(payload, response, {\n          legacy: true,\n          error: false\n        })).catch(error => this._processJsonRpcResponse(payload, error, {\n          legacy: true,\n          error: true\n        }));\n      }\n      throw new ProviderError('Provider does not have a request or send method to use.');\n    });\n  }\n  // eslint-disable-next-line class-methods-use-this\n  _processJsonRpcResponse(payload, response, {\n    legacy,\n    error\n  }) {\n    if (isNullish(response)) {\n      return this._buildResponse(payload,\n      // Some providers uses \"null\" as valid empty response\n      // eslint-disable-next-line no-null/no-null\n      null, error);\n    }\n    // This is the majority of the cases so check these first\n    // A valid JSON-RPC response with error object\n    if (jsonRpc.isResponseWithError(response)) {\n      // check if its an rpc error\n      if (this.useRpcCallSpecification && isResponseRpcError(response)) {\n        const rpcErrorResponse = response;\n        // check if rpc error flag is on and response error code match an EIP-1474 or a standard rpc error code\n        if (rpcErrorsMap.get(rpcErrorResponse.error.code)) {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          const Err = rpcErrorsMap.get(rpcErrorResponse.error.code).error;\n          throw new Err(rpcErrorResponse);\n        } else {\n          throw new RpcError(rpcErrorResponse);\n        }\n      } else if (!Web3RequestManager._isReverted(response)) {\n        throw new InvalidResponseError(response, payload);\n      }\n    }\n    // This is the majority of the cases so check these first\n    // A valid JSON-RPC response with result object\n    if (jsonRpc.isResponseWithResult(response)) {\n      return response;\n    }\n    if (response instanceof Error) {\n      Web3RequestManager._isReverted(response);\n      throw response;\n    }\n    if (!legacy && jsonRpc.isBatchRequest(payload) && jsonRpc.isBatchResponse(response)) {\n      return response;\n    }\n    if (legacy && !error && jsonRpc.isBatchRequest(payload)) {\n      return response;\n    }\n    if (legacy && error && jsonRpc.isBatchRequest(payload)) {\n      // In case of error batch response we don't want to throw Invalid response\n      throw response;\n    }\n    if (legacy && !jsonRpc.isResponseWithError(response) && !jsonRpc.isResponseWithResult(response)) {\n      return this._buildResponse(payload, response, error);\n    }\n    if (jsonRpc.isBatchRequest(payload) && !Array.isArray(response)) {\n      throw new ResponseError(response, 'Got normal response for a batch request.');\n    }\n    if (!jsonRpc.isBatchRequest(payload) && Array.isArray(response)) {\n      throw new ResponseError(response, 'Got batch response for a normal request.');\n    }\n    throw new ResponseError(response, 'Invalid response');\n  }\n  static _isReverted(response) {\n    let error;\n    if (jsonRpc.isResponseWithError(response)) {\n      error = response.error;\n    } else if (response instanceof Error) {\n      error = response;\n    }\n    // This message means that there was an error while executing the code of the smart contract\n    // However, more processing will happen at a higher level to decode the error data,\n    //\taccording to the Error ABI, if it was available as of EIP-838.\n    if (error === null || error === void 0 ? void 0 : error.message.includes('revert')) throw new ContractExecutionError(error);\n    return false;\n  }\n  // Need to use same types as _processJsonRpcResponse so have to declare as instance method\n  // eslint-disable-next-line class-methods-use-this\n  _buildResponse(payload, response, error) {\n    const res = {\n      jsonrpc: '2.0',\n      // eslint-disable-next-line no-nested-ternary\n      id: jsonRpc.isBatchRequest(payload) ? payload[0].id : 'id' in payload ? payload.id :\n      // Have to use the null here explicitly\n      // eslint-disable-next-line no-null/no-null\n      null\n    };\n    if (error) {\n      return Object.assign(Object.assign({}, res), {\n        error: response\n      });\n    }\n    return Object.assign(Object.assign({}, res), {\n      result: response\n    });\n  }\n}","map":{"version":3,"names":["ContractExecutionError","InvalidResponseError","ProviderError","ResponseError","rpcErrorsMap","RpcError","HttpProvider","WSProvider","isNullish","isPromise","jsonRpc","isResponseRpcError","isEIP1193Provider","isLegacyRequestProvider","isLegacySendAsyncProvider","isLegacySendProvider","isWeb3Provider","Web3EventEmitter","Web3RequestManagerEvent","availableProviders","WebsocketProvider","Web3RequestManager","constructor","provider","useRpcCallSpecification","requestManagerMiddleware","setProvider","middleware","providers","_provider","newProvider","test","undefined","emit","BEFORE_PROVIDER_CHANGE","PROVIDER_CHANGED","setMiddleware","send","request","requestObj","Object","assign","response","_sendRequest","processResponse","isResponseWithResult","result","sendBatch","payload","isBatchRequest","toBatchPayload","toPayload","processRequest","error","_processJsonRpcResponse","legacy","then","res","catch","Promise","resolve","reject","rejectWithError","err","resolveWithResponse","responsePromise","processedError","processingError","sendAsync","_buildResponse","isResponseWithError","rpcErrorResponse","get","code","Err","_isReverted","Error","isBatchResponse","Array","isArray","message","includes","jsonrpc","id"],"sources":["/Users/meite/Desktop/X/ECNU/Blockchain/solidity-24/foundry-f24/raffle/raffle-dapp/node_modules/web3-core/src/web3_request_manager.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tContractExecutionError,\n\tInvalidResponseError,\n\tProviderError,\n\tResponseError,\n\trpcErrorsMap,\n\tRpcError,\n} from 'web3-errors';\nimport HttpProvider from 'web3-providers-http';\nimport WSProvider from 'web3-providers-ws';\nimport {\n\tEthExecutionAPI,\n\tJsonRpcBatchRequest,\n\tJsonRpcBatchResponse,\n\tJsonRpcPayload,\n\tJsonRpcResponse,\n\tJsonRpcError,\n\tJsonRpcResponseWithResult,\n\tJsonRpcResponseWithError,\n\tSupportedProviders,\n\tWeb3APIMethod,\n\tWeb3APIPayload,\n\tWeb3APIRequest,\n\tWeb3APIReturnType,\n\tWeb3APISpec,\n\tWeb3BaseProvider,\n\tWeb3BaseProviderConstructor,\n} from 'web3-types';\nimport { isNullish, isPromise, jsonRpc, isResponseRpcError } from 'web3-utils';\nimport {\n\tisEIP1193Provider,\n\tisLegacyRequestProvider,\n\tisLegacySendAsyncProvider,\n\tisLegacySendProvider,\n\tisWeb3Provider,\n} from './utils.js';\nimport { Web3EventEmitter } from './web3_event_emitter.js';\nimport { RequestManagerMiddleware } from './types.js';\n\nexport enum Web3RequestManagerEvent {\n\tPROVIDER_CHANGED = 'PROVIDER_CHANGED',\n\tBEFORE_PROVIDER_CHANGE = 'BEFORE_PROVIDER_CHANGE',\n}\n\nconst availableProviders: {\n\tHttpProvider: Web3BaseProviderConstructor;\n\tWebsocketProvider: Web3BaseProviderConstructor;\n} = {\n\tHttpProvider: HttpProvider as Web3BaseProviderConstructor,\n\tWebsocketProvider: WSProvider as Web3BaseProviderConstructor,\n};\n\nexport class Web3RequestManager<\n\tAPI extends Web3APISpec = EthExecutionAPI,\n> extends Web3EventEmitter<{\n\t[key in Web3RequestManagerEvent]: SupportedProviders<API> | undefined;\n}> {\n\tprivate _provider?: SupportedProviders<API>;\n\tprivate readonly useRpcCallSpecification?: boolean;\n\tpublic middleware?: RequestManagerMiddleware<API>;\n\n\tpublic constructor(\n\t\tprovider?: SupportedProviders<API> | string,\n\t\tuseRpcCallSpecification?: boolean,\n\t\trequestManagerMiddleware?: RequestManagerMiddleware<API>,\n\t) {\n\t\tsuper();\n\n\t\tif (!isNullish(provider)) {\n\t\t\tthis.setProvider(provider);\n\t\t}\n\t\tthis.useRpcCallSpecification = useRpcCallSpecification;\n\n\t\tif (!isNullish(requestManagerMiddleware)) this.middleware = requestManagerMiddleware;\n\t}\n\n\t/**\n\t * Will return all available providers\n\t */\n\tpublic static get providers() {\n\t\treturn availableProviders;\n\t}\n\n\t/**\n\t * Will return the current provider.\n\t *\n\t * @returns Returns the current provider\n\t */\n\tpublic get provider() {\n\t\treturn this._provider;\n\t}\n\n\t/**\n\t * Will return all available providers\n\t */\n\t// eslint-disable-next-line class-methods-use-this\n\tpublic get providers() {\n\t\treturn availableProviders;\n\t}\n\n\t/**\n\t * Use to set provider. Provider can be a provider instance or a string.\n\t *\n\t * @param provider - The provider to set\n\t */\n\tpublic setProvider(provider?: SupportedProviders<API> | string): boolean {\n\t\tlet newProvider: SupportedProviders<API> | undefined;\n\n\t\t// autodetect provider\n\t\tif (provider && typeof provider === 'string' && this.providers) {\n\t\t\t// HTTP\n\t\t\tif (/^http(s)?:\\/\\//i.test(provider)) {\n\t\t\t\tnewProvider = new this.providers.HttpProvider<API>(provider);\n\n\t\t\t\t// WS\n\t\t\t} else if (/^ws(s)?:\\/\\//i.test(provider)) {\n\t\t\t\tnewProvider = new this.providers.WebsocketProvider<API>(provider);\n\t\t\t} else {\n\t\t\t\tthrow new ProviderError(`Can't autodetect provider for \"${provider}\"`);\n\t\t\t}\n\t\t} else if (isNullish(provider)) {\n\t\t\t// In case want to unset the provider\n\t\t\tnewProvider = undefined;\n\t\t} else {\n\t\t\tnewProvider = provider as SupportedProviders<API>;\n\t\t}\n\n\t\tthis.emit(Web3RequestManagerEvent.BEFORE_PROVIDER_CHANGE, this._provider);\n\t\tthis._provider = newProvider;\n\t\tthis.emit(Web3RequestManagerEvent.PROVIDER_CHANGED, this._provider);\n\t\treturn true;\n\t}\n\n\tpublic setMiddleware(requestManagerMiddleware: RequestManagerMiddleware<API>) {\n\t\tthis.middleware = requestManagerMiddleware;\n\t}\n\n\t/**\n\t *\n\t * Will execute a request\n\t *\n\t * @param request - {@link Web3APIRequest} The request to send\n\t *\n\t * @returns The response of the request {@link ResponseType}. If there is error\n\t * in the response, will throw an error\n\t */\n\tpublic async send<\n\t\tMethod extends Web3APIMethod<API>,\n\t\tResponseType = Web3APIReturnType<API, Method>,\n\t>(request: Web3APIRequest<API, Method>): Promise<ResponseType> {\n\t\tconst requestObj = { ...request };\n\n\t\tlet response = await this._sendRequest<Method, ResponseType>(requestObj);\n\n\t\tif (!isNullish(this.middleware)) response = await this.middleware.processResponse(response);\n\n\t\tif (jsonRpc.isResponseWithResult(response)) {\n\t\t\treturn response.result;\n\t\t}\n\n\t\tthrow new ResponseError(response);\n\t}\n\n\t/**\n\t * Same as send, but, will execute a batch of requests\n\t *\n\t * @param request {@link JsonRpcBatchRequest} The batch request to send\n\t */\n\tpublic async sendBatch(request: JsonRpcBatchRequest): Promise<JsonRpcBatchResponse<unknown>> {\n\t\tconst response = await this._sendRequest<never, never>(request);\n\n\t\treturn response as JsonRpcBatchResponse<unknown>;\n\t}\n\n\tprivate async _sendRequest<\n\t\tMethod extends Web3APIMethod<API>,\n\t\tResponseType = Web3APIReturnType<API, Method>,\n\t>(\n\t\trequest: Web3APIRequest<API, Method> | JsonRpcBatchRequest,\n\t): Promise<JsonRpcResponse<ResponseType>> {\n\t\tconst { provider } = this;\n\n\t\tif (isNullish(provider)) {\n\t\t\tthrow new ProviderError(\n\t\t\t\t'Provider not available. Use `.setProvider` or `.provider=` to initialize the provider.',\n\t\t\t);\n\t\t}\n\n\t\tlet payload = (\n\t\t\tjsonRpc.isBatchRequest(request)\n\t\t\t\t? jsonRpc.toBatchPayload(request)\n\t\t\t\t: jsonRpc.toPayload(request)\n\t\t) as JsonRpcPayload;\n\n\t\tif (!isNullish(this.middleware)) {\n\t\t\tpayload = await this.middleware.processRequest(payload);\n\t\t}\n\t\tif (isWeb3Provider(provider)) {\n\t\t\tlet response;\n\n\t\t\ttry {\n\t\t\t\tresponse = await provider.request<Method, ResponseType>(\n\t\t\t\t\tpayload as Web3APIPayload<API, Method>,\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\t// Check if the provider throw an error instead of reject with error\n\t\t\t\tresponse = error as JsonRpcResponse<ResponseType>;\n\t\t\t}\n\t\t\treturn this._processJsonRpcResponse(payload, response, { legacy: false, error: false });\n\t\t}\n\n\t\tif (isEIP1193Provider(provider)) {\n\t\t\treturn (provider as Web3BaseProvider<API>)\n\t\t\t\t.request<Method, ResponseType>(payload as Web3APIPayload<API, Method>)\n\t\t\t\t.then(\n\t\t\t\t\tres =>\n\t\t\t\t\t\tthis._processJsonRpcResponse(payload, res, {\n\t\t\t\t\t\t\tlegacy: true,\n\t\t\t\t\t\t\terror: false,\n\t\t\t\t\t\t}) as JsonRpcResponseWithResult<ResponseType>,\n\t\t\t\t)\n\t\t\t\t.catch(error =>\n\t\t\t\t\tthis._processJsonRpcResponse(\n\t\t\t\t\t\tpayload,\n\t\t\t\t\t\terror as JsonRpcResponse<ResponseType, unknown>,\n\t\t\t\t\t\t{ legacy: true, error: true },\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t}\n\n\t\t// TODO: This could be deprecated and removed.\n\t\tif (isLegacyRequestProvider(provider)) {\n\t\t\treturn new Promise<JsonRpcResponse<ResponseType>>((resolve, reject) => {\n\t\t\t\tconst rejectWithError = (err: unknown) => {\n\t\t\t\t\treject(\n\t\t\t\t\t\tthis._processJsonRpcResponse(\n\t\t\t\t\t\t\tpayload,\n\t\t\t\t\t\t\terr as JsonRpcResponse<ResponseType>,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlegacy: true,\n\t\t\t\t\t\t\t\terror: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t};\n\n\t\t\t\tconst resolveWithResponse = (response: JsonRpcResponse<ResponseType>) =>\n\t\t\t\t\tresolve(\n\t\t\t\t\t\tthis._processJsonRpcResponse(payload, response, {\n\t\t\t\t\t\t\tlegacy: true,\n\t\t\t\t\t\t\terror: false,\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\tconst result = provider.request<ResponseType>(\n\t\t\t\t\tpayload,\n\t\t\t\t\t// a callback that is expected to be called after getting the response:\n\t\t\t\t\t(err, response) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn rejectWithError(err);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn resolveWithResponse(response);\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\t// Some providers, that follow a previous drafted version of EIP1193, has a `request` function\n\t\t\t\t//\tthat is not defined as `async`, but it returns a promise.\n\t\t\t\t// Such providers would not be picked with if(isEIP1193Provider(provider)) above\n\t\t\t\t//\tbecause the `request` function was not defined with `async` and so the function definition is not `AsyncFunction`.\n\t\t\t\t// Like this provider: https://github.dev/NomicFoundation/hardhat/blob/62bea2600785595ba36f2105564076cf5cdf0fd8/packages/hardhat-core/src/internal/core/providers/backwards-compatibility.ts#L19\n\t\t\t\t// So check if the returned result is a Promise, and resolve with it accordingly.\n\t\t\t\t// Note: in this case we expect the callback provided above to never be called.\n\t\t\t\tif (isPromise(result)) {\n\t\t\t\t\tconst responsePromise = result as unknown as Promise<\n\t\t\t\t\t\tJsonRpcResponse<ResponseType>\n\t\t\t\t\t>;\n\t\t\t\t\tresponsePromise.then(resolveWithResponse).catch(error => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t// Attempt to process the error response\n\t\t\t\t\t\t\tconst processedError = this._processJsonRpcResponse(\n\t\t\t\t\t\t\t\tpayload,\n\t\t\t\t\t\t\t\terror as JsonRpcResponse<ResponseType, unknown>,\n\t\t\t\t\t\t\t\t{ legacy: true, error: true },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treject(processedError);\n\t\t\t\t\t\t} catch (processingError) {\n\t\t\t\t\t\t\t// Catch any errors that occur during the error processing\n\t\t\t\t\t\t\treject(processingError);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// TODO: This could be deprecated and removed.\n\t\tif (isLegacySendProvider(provider)) {\n\t\t\treturn new Promise<JsonRpcResponse<ResponseType>>((resolve, reject): void => {\n\t\t\t\tprovider.send<ResponseType>(payload, (err, response) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn reject(\n\t\t\t\t\t\t\tthis._processJsonRpcResponse(\n\t\t\t\t\t\t\t\tpayload,\n\t\t\t\t\t\t\t\terr as unknown as JsonRpcResponse<ResponseType>,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlegacy: true,\n\t\t\t\t\t\t\t\t\terror: true,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isNullish(response)) {\n\t\t\t\t\t\tthrow new ResponseError(\n\t\t\t\t\t\t\t{} as never,\n\t\t\t\t\t\t\t'Got a \"nullish\" response from provider.',\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn resolve(\n\t\t\t\t\t\tthis._processJsonRpcResponse(payload, response, {\n\t\t\t\t\t\t\tlegacy: true,\n\t\t\t\t\t\t\terror: false,\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t// TODO: This could be deprecated and removed.\n\t\tif (isLegacySendAsyncProvider(provider)) {\n\t\t\treturn provider\n\t\t\t\t.sendAsync<ResponseType>(payload)\n\t\t\t\t.then(response =>\n\t\t\t\t\tthis._processJsonRpcResponse(payload, response, { legacy: true, error: false }),\n\t\t\t\t)\n\t\t\t\t.catch(error =>\n\t\t\t\t\tthis._processJsonRpcResponse(payload, error as JsonRpcResponse<ResponseType>, {\n\t\t\t\t\t\tlegacy: true,\n\t\t\t\t\t\terror: true,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t}\n\n\t\tthrow new ProviderError('Provider does not have a request or send method to use.');\n\t}\n\n\t// eslint-disable-next-line class-methods-use-this\n\tprivate _processJsonRpcResponse<ResultType, ErrorType, RequestType>(\n\t\tpayload: JsonRpcPayload<RequestType>,\n\t\tresponse: JsonRpcResponse<ResultType, ErrorType>,\n\t\t{ legacy, error }: { legacy: boolean; error: boolean },\n\t): JsonRpcResponse<ResultType> | never {\n\t\tif (isNullish(response)) {\n\t\t\treturn this._buildResponse(\n\t\t\t\tpayload,\n\t\t\t\t// Some providers uses \"null\" as valid empty response\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\tnull as unknown as JsonRpcResponse<ResultType, ErrorType>,\n\t\t\t\terror,\n\t\t\t);\n\t\t}\n\n\t\t// This is the majority of the cases so check these first\n\t\t// A valid JSON-RPC response with error object\n\t\tif (jsonRpc.isResponseWithError<ErrorType>(response)) {\n\t\t\t// check if its an rpc error\n\t\t\tif (\n\t\t\t\tthis.useRpcCallSpecification &&\n\t\t\t\tisResponseRpcError(response as JsonRpcResponseWithError)\n\t\t\t) {\n\t\t\t\tconst rpcErrorResponse = response as JsonRpcResponseWithError;\n\t\t\t\t// check if rpc error flag is on and response error code match an EIP-1474 or a standard rpc error code\n\t\t\t\tif (rpcErrorsMap.get(rpcErrorResponse.error.code)) {\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\t\t\tconst Err = rpcErrorsMap.get(rpcErrorResponse.error.code)!.error;\n\t\t\t\t\tthrow new Err(rpcErrorResponse);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new RpcError(rpcErrorResponse);\n\t\t\t\t}\n\t\t\t} else if (!Web3RequestManager._isReverted(response)) {\n\t\t\t\tthrow new InvalidResponseError<ErrorType, RequestType>(response, payload);\n\t\t\t}\n\t\t}\n\n\t\t// This is the majority of the cases so check these first\n\t\t// A valid JSON-RPC response with result object\n\t\tif (jsonRpc.isResponseWithResult<ResultType>(response)) {\n\t\t\treturn response;\n\t\t}\n\n\t\tif ((response as unknown) instanceof Error) {\n\t\t\tWeb3RequestManager._isReverted(response);\n\t\t\tthrow response;\n\t\t}\n\n\t\tif (!legacy && jsonRpc.isBatchRequest(payload) && jsonRpc.isBatchResponse(response)) {\n\t\t\treturn response as JsonRpcBatchResponse<ResultType>;\n\t\t}\n\n\t\tif (legacy && !error && jsonRpc.isBatchRequest(payload)) {\n\t\t\treturn response as JsonRpcBatchResponse<ResultType>;\n\t\t}\n\n\t\tif (legacy && error && jsonRpc.isBatchRequest(payload)) {\n\t\t\t// In case of error batch response we don't want to throw Invalid response\n\t\t\tthrow response;\n\t\t}\n\n\t\tif (\n\t\t\tlegacy &&\n\t\t\t!jsonRpc.isResponseWithError(response) &&\n\t\t\t!jsonRpc.isResponseWithResult(response)\n\t\t) {\n\t\t\treturn this._buildResponse(payload, response, error);\n\t\t}\n\t\tif (jsonRpc.isBatchRequest(payload) && !Array.isArray(response)) {\n\t\t\tthrow new ResponseError(response, 'Got normal response for a batch request.');\n\t\t}\n\n\t\tif (!jsonRpc.isBatchRequest(payload) && Array.isArray(response)) {\n\t\t\tthrow new ResponseError(response, 'Got batch response for a normal request.');\n\t\t}\n\n\t\tthrow new ResponseError(response, 'Invalid response');\n\t}\n\n\tprivate static _isReverted<ResultType, ErrorType>(\n\t\tresponse: JsonRpcResponse<ResultType, ErrorType>,\n\t): boolean {\n\t\tlet error: JsonRpcError | undefined;\n\n\t\tif (jsonRpc.isResponseWithError<ErrorType>(response)) {\n\t\t\terror = (response as JsonRpcResponseWithError).error;\n\t\t} else if ((response as unknown) instanceof Error) {\n\t\t\terror = response as unknown as JsonRpcError;\n\t\t}\n\n\t\t// This message means that there was an error while executing the code of the smart contract\n\t\t// However, more processing will happen at a higher level to decode the error data,\n\t\t//\taccording to the Error ABI, if it was available as of EIP-838.\n\t\tif (error?.message.includes('revert')) throw new ContractExecutionError(error);\n\n\t\treturn false;\n\t}\n\t// Need to use same types as _processJsonRpcResponse so have to declare as instance method\n\t// eslint-disable-next-line class-methods-use-this\n\tprivate _buildResponse<ResultType, ErrorType, RequestType>(\n\t\tpayload: JsonRpcPayload<RequestType>,\n\t\tresponse: JsonRpcResponse<ResultType, ErrorType>,\n\t\terror: boolean,\n\t): JsonRpcResponse<ResultType> {\n\t\tconst res = {\n\t\t\tjsonrpc: '2.0',\n\t\t\t// eslint-disable-next-line no-nested-ternary\n\t\t\tid: jsonRpc.isBatchRequest(payload)\n\t\t\t\t? payload[0].id\n\t\t\t\t: 'id' in payload\n\t\t\t\t? payload.id\n\t\t\t\t: // Have to use the null here explicitly\n\t\t\t\t  // eslint-disable-next-line no-null/no-null\n\t\t\t\t  null,\n\t\t};\n\n\t\tif (error) {\n\t\t\treturn {\n\t\t\t\t...res,\n\t\t\t\terror: response as unknown,\n\t\t\t} as JsonRpcResponse<ResultType>;\n\t\t}\n\n\t\treturn {\n\t\t\t...res,\n\t\t\tresult: response as unknown,\n\t\t} as JsonRpcResponse<ResultType>;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}